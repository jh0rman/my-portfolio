---
import { t } from 'i18next'
import ThemeToggler from './ThemeToggler.astro'
import LanguageSwitcher from './LanguageSwitcher.astro'
import Divider from './Divider.astro'
import AppIcon from './icons/App.astro'
import UserIcon from './icons/User.astro'
import BookmarkIcon from './icons/Bookmark.astro'

const navigation = [
  {
    name: t('projects'),
    href: 'projects',
    color: 'mimosa',
    icon: AppIcon
  },
  {
    name: t('aboutMe'),
    href: 'me',
    color: 'orchid',
    icon: UserIcon
  },
  {
    name: t('articles'),
    href: 'article',
    color: 'emerald',
    icon: BookmarkIcon
  }
]
---

<nav class="sticky bd:blur(8) bg:white/.2 bg:zinc/.3@dark top:0 w:full">
  <div class="flex flex:col gap:16 max-w:screen-sm mx:auto px:20 px:24@xs px:32@md py:16">
    <a href="#" class="flex ai:center gap:16">
      <div class='h:48 w:48'>
        <img class='avatar round grayscale(1) h:full w:full' src="/img/profile.webp" alt="profile" />
      </div>
      <div class="name flex f:semibold flex:col">
        <span class="f:18">Jhorman Ruswel</span>
        <span class="f:14 f:gray f:gray/.8@dark">Tito Tito</span>
      </div>
    </a>
    <div class="flex ai:center jc:space-between">
      <nav id="navigation" class="flex ai:center f:medium f:gray f:xs">
        {navigation.map(item => (
          <a class="flex ai:center gap:6 fg:gray capitalize px:14 py:12" href={`#${item.href}`}>
            <item.icon class="h:24" />
            {item.name}
          </a>
        ))}
      </nav>
      <span id="indicator" class="bg:gray/.2 r:16 abs"></span>
      <div class="flex ai:center gap:8">
        <ThemeToggler />
        <LanguageSwitcher />
      </div>
    </div>
  </div>
  <Divider />
</nav>

<script>
  const html = document.querySelector('html') as HTMLElement
  const navigation = document.getElementById('navigation')

  window.addEventListener('scroll', handleScrollEvents, { passive: true })
  window.addEventListener("resize", handleScrollEvents, { passive: true })

  function handleScrollEvents () {
    updateActiveNavigation()
  }

  function updateActiveNavigation () {
    const fragments = document.querySelectorAll('section[id]')
    const scrollPaddingTop = parseInt(window.getComputedStyle(html).scrollPaddingTop)
    const spaceBetween = 40

    fragments.forEach((fragment, i) => {
      const link = navigation?.getElementsByTagName('a')[i]
      const rect = fragment.getBoundingClientRect()
      if (rect.top <= scrollPaddingTop && rect.bottom > (scrollPaddingTop - spaceBetween)) {
        link?.classList.add('active')
      } else {
        link?.classList.remove('active')
      }
    })
  }
</script>

<style>
#indicator {
  --transition: 0.165s;
  top: anchor(--nav top);
  bottom: anchor(--nav bottom);
  left: calc(anchor(var(--active, --projects) left));
  right: calc(anchor(var(--active, --projects) right));
  z-index: -1;
  scale: var(--visible, 0);
  transition:
    opacity var(--transition) 0s,
    scale var(--transition) 0s,
    left var(--transition) var(--transition) ease-in,
    right var(--transition) var(--transition) ease-in;
}
[href="#projects"] {
  anchor-name: --projects;
}
[href="#me"] {
  anchor-name: --me;
}
[href="#article"] {
  anchor-name: --article;
}
:root:has([href="#projects"]:is(:hover, :focus-visible)) {
  --active: --projects;
}
:root:has([href="#me"]:is(:hover, :focus-visible)) {
  --active: --me;
}
:root:has([href="#article"]:is(:hover, :focus-visible)) {
  --active: --article;
}
:root:has(nav:is(:hover, :focus-within, :focus-visible)) {
  --visible: 1;
}
:root:has(nav:is(:hover, :focus-within, :focus-visible)) #indicator {
  --transition: 0.165s;
  transition:
    opacity var(--transition) var(--transition),
    scale var(--transition) var(--transition),
    left var(--transition) 0s ease-out,
    right var(--transition) 0s ease-out;
}
#navigation {
  anchor-name: --nav;
}
#navigation a.active {
  text-decoration-line: underline;
  text-underline-offset: 3px;
  text-decoration-thickness: 3px;
}
nav {
  animation: background-up linear both;
  animation-timeline: scroll();
  animation-range: 0 var(--nav-offset-top);
}
.avatar {
  animation: scale-down linear both;
  animation-timeline: scroll();
  animation-range: 0 var(--nav-offset-top);
}
.name {
  animation: color-up linear both;
  animation-timeline: scroll();
  animation-range: 100px var(--nav-offset-top);
}
</style>
