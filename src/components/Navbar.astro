---
import { t } from 'i18next'
import ThemeToggler from './ThemeToggler.astro'
import LanguageSwitcher from './LanguageSwitcher.astro'
import Divider from './Divider.astro'

const navigation = [
  {
    name: t('projects'),
    href: 'projects',
    color: 'mimosa'
  },
  {
    name: t('aboutMe'),
    href: 'me',
    color: 'orchid'
  },
  {
    name: t('articles'),
    href: 'article',
    color: 'emerald'
  }
]

const colorVariants: Record<string, string> = {
  orchid: 'bg-orchid/10 text-orchid hover:bg-orchid/20 decoration-orchid [&.active]:text-orchid',
  emerald: 'bg-emerald/10 text-emerald hover:bg-emerald/20 decoration-emerald [&.active]:text-emerald',
  mimosa: 'bg-mimosa/10 text-mimosa hover:bg-mimosa/20 decoration-mimosa [&.active]:text-mimosa'
}
---

<nav id="navbar" class="w-full sticky top-0 bg-white/90 dark:bg-zinc/80 backdrop-blur-lg z-20 mt-[-4rem]">
  <div class="max-w-screen-md space-y-3 mx-auto px-2 py-4 sm:px-6 lg:px-8">
    <div class='w-12 h-12 relative'>
      <div class="absolute origin-bottom-left" style={{ transform: 'var(--avatar-image-transform)' }}>
        <a href="#" class="relative before:absolute before:inset-0 before:bg-purple/20 before:dark:bg-purple/30 before:rounded-[59%_41%_81%_19%/70%_22%_78%_30%]">
          <img class='w-full h-full rounded-full grayscale' src="/img/profile.webp" alt="profile" />
        </a>
      </div>
    </div>
    <div class="flex items-center justify-between">
      <ul id="navigation" class="flex items-center gap-2 text-gray dark:text-gray font-bold">
        {navigation.map(item => (
          <li>
            <a class={colorVariants[item.color]} href={`#${item.href}`}>
              <>{item.name}</>
            </a>
          </li>
        ))}
      </ul>
      <div class="flex items-center gap-2">
        <ThemeToggler />
        <LanguageSwitcher />
      </div>
    </div>
  </div>
  <Divider />
</nav>

<script>
  const html = document.querySelector('html')
  const navigation = document.getElementById('navigation')
  const downDelay = document.getElementById('navbar')?.offsetTop ?? 0

  updateAvatarTransform()
  updateTitleOpacity()

  window.addEventListener('scroll', handleScrollEvents, { passive: true })

  function handleScrollEvents () {
    updateActiveNavigation()
    updateAvatarTransform()
    updateTitleOpacity()
  }

  function updateActiveNavigation () {
    const fragments = document.querySelectorAll('section[id]')
    const scrollPaddingTop = parseInt(window.getComputedStyle(html).scrollPaddingTop)
    const spaceBetween = 40

    fragments.forEach((fragment, i) => {
      const link = navigation?.getElementsByTagName('a')[i]
      const rect = fragment.getBoundingClientRect()
      if (rect.top <= scrollPaddingTop && rect.bottom > (scrollPaddingTop - spaceBetween)) {
        link?.classList.add('active')
      } else {
        link?.classList.remove('active')
      }
    })
  }

  function updateAvatarTransform () {
    const fromScale = 4
    const toScale = 1
    const fromY = -1.25
    const toY = 0

    const scrollY = downDelay - window.scrollY

    let scale = (scrollY * (fromScale - toScale)) / downDelay + toScale
    scale = clamp(scale, fromScale, toScale)

    let y = (scrollY * (fromY - toY)) / downDelay + toY
    y = clamp(y, fromY, toY)

    setProperty('--avatar-image-transform', `translate3d(0, ${y}rem, 0) scale(${scale})`)
  }

  function updateTitleOpacity () {
    const fromOpacity = 1
    const toOpacity = 0

    let opacity = (scrollY * (fromOpacity - toOpacity)) / downDelay + toOpacity
    opacity = clamp(opacity, fromOpacity, toOpacity)

    setProperty('--title-opacity', opacity)
  }

  function clamp (number, a, b) {
    const min = Math.min(a, b)
    const max = Math.max(a, b)
    return Math.min(Math.max(number, min), max)
  }

  function setProperty (property, value) {
    document.documentElement.style.setProperty(property, value)
  }
</script>

<style>
  #navigation a {
    @apply flex items-center gap-2 p-3 rounded-xl;
  }
  #navigation a.active {
    @apply underline underline-offset-[3px] decoration-[3px];
  }
</style>
