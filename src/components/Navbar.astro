---
import { t } from 'i18next'
import ThemeToggler from './ThemeToggler.astro'
import LanguageSwitcher from './LanguageSwitcher.astro'
import AppIcon from './icons/App.astro'
import UserIcon from './icons/User.astro'
import BookmarkIcon from './icons/Bookmark.astro'

const navigation = [
  {
    name: t('projects'),
    href: 'projects',
    color: 'mimosa',
    icon: AppIcon
  },
  {
    name: t('aboutMe'),
    href: 'me',
    color: 'orchid',
    icon: UserIcon
  },
  {
    name: t('articles'),
    href: 'article',
    color: 'emerald',
    icon: BookmarkIcon
  }
]
---

<nav class="sticky top:10 bd:blur(8) bg:white/.8 bg:gray-10/.8@dark flex gap:24 w:full max-w:screen-sm px:20 px:24@xs px:24@md py:13 r:26 b:1 b:gray-50/.1 b:gray-50/.3@dark">
  <a href="#" class="flex ai:center gap:16 flex-shrink:0">
    <div class='h:54 w:54'>
      <img class='avatar round grayscale(1) h:full w:full' src="/img/profile.webp" alt="profile" />
    </div>
    <div class="name flex f:semibold flex:col transition:opacity|200ms|ease-in opacity:0">
      <span class="f:18">Jhorman Tito</span>
      <span class="f:14 fg:gray-50 fg:gray/.8@dark">Web Developer</span>
    </div>
  </a>
  <div class="flex ai:center jc:space-between w:full z:1">
    <div id="navigation" class="flex ai:center f:medium f:gray f:xs transition:margin-left|150ms|linear ml:-207 ml:0.is-fixed">
      {navigation.map(item => (
        <a title={item.name} class="flex ai:center gap:6 fg:gray-60 fg:gray-40[aria-current='page'] fg:gray-80[aria-current='page']@dark capitalize p:8" href={`#${item.href}`}>
          <item.icon class="h:38" />
        </a>
      ))}
    </div>
    <span id="indicator" class="bg:gray-70/.2 round abs"></span>
    <div class="flex ai:center gap:8">
      <ThemeToggler />
      <LanguageSwitcher />
    </div>
  </div>
</nav>

<script>
  const html = document.querySelector('html') as HTMLElement
  const navigation = document.getElementById('navigation')

  window.addEventListener('scroll', handleScrollEvents, { passive: true })
  window.addEventListener("resize", handleScrollEvents, { passive: true })

  function handleScrollEvents () {
    updateActiveNavigation()
    setFixedNavigation()
  }

  function setFixedNavigation () {
    const scrollPosition = window.scrollY
    const navOffsetTop = 387

    if (navOffsetTop && scrollPosition > navOffsetTop) {
      navigation?.classList.add('is-fixed')
    } else {
      navigation?.classList.remove('is-fixed')
    }
  }

  function updateActiveNavigation () {
    const fragments = document.querySelectorAll('section[id]')
    const scrollPaddingTop = parseInt(window.getComputedStyle(html).scrollPaddingTop) + 1
    const spaceBetween = 40

    fragments.forEach((fragment, i) => {
      const link = navigation?.getElementsByTagName('a')[i]
      const rect = fragment.getBoundingClientRect()
      if (rect.top <= scrollPaddingTop && rect.bottom > (scrollPaddingTop - spaceBetween)) {
        link?.setAttribute('aria-current', 'page')
      } else {
        link?.removeAttribute('aria-current')
      }
    })
  }
</script>

<style>
#indicator {
  --transition: 0.08s;
  top: anchor(--nav top);
  bottom: anchor(--nav bottom);
  left: calc(anchor(var(--active, --projects) left));
  right: calc(anchor(var(--active, --projects) right));
  z-index: -1;
  transition:
    left var(--transition) var(--transition) linear,
    right var(--transition) var(--transition) linear;
}
[href="#projects"] {
  anchor-name: --projects;
}
[href="#me"] {
  anchor-name: --me;
}
[href="#article"] {
  anchor-name: --article;
}
:root:has([href="#projects"]:is([aria-current="page"])) {
  --active: --projects;
}
:root:has([href="#me"]:is([aria-current="page"])) {
  --active: --me;
}
:root:has([href="#article"]:is([aria-current="page"])) {
  --active: --article;
}
:root:has([href="#projects"]:is(:hover, :focus-visible)) {
  --active: --projects;
}
:root:has([href="#me"]:is(:hover, :focus-visible)) {
  --active: --me;
}
:root:has([href="#article"]:is(:hover, :focus-visible)) {
  --active: --article;
}
:root:has(nav:is(:hover, :focus-within, :focus-visible)) #indicator {
  --transition: 0.165s;
  transition:
    left var(--transition) 0s linear,
    right var(--transition) 0s linear;
}
#navigation {
  anchor-name: --nav;
}
nav:has(#navigation.is-fixed) .name {
  opacity: 1;
}
.avatar {
  animation: scale-down linear both;
  animation-timeline: scroll();
  animation-range: 0 var(--nav-offset-top);
}
</style>
